using System.Linq;
using Content.Shared._PS.Terradrop;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;

namespace Content.Client._PS.Terradrop;

[GenerateTypedNameReferences]
public sealed partial class TerradropInfoPanel : Control
{
    [Dependency] private readonly IEntityManager _ent = default!;
    [Dependency] private readonly IPrototypeManager _proto = default!;
    [Dependency] private readonly ILogManager _logManager = default!;

    private ISawmill _sawmill = default!;
    public TerradropMapPrototype Prototype;
    public Action<TerradropMapPrototype>? StartAction;

    public TerradropInfoPanel(TerradropMapPrototype proto, bool hasAccess, TerradropMapAvailability availability, SpriteSystem sprite)
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        _sawmill = _logManager.GetSawmill("terradrop");

        var terradrop = _ent.System<SharedTerradropSystem>();
        Prototype = proto;

        NodeNameLabel.Text = Loc.GetString(proto.Name);

        NodeTexture.SetPrototype(proto.Icon);

        InitializePrerequisites(proto, terradrop, sprite);

        StartButton.ToolTip = !hasAccess
            ? Loc.GetString("research-console-no-access-popup")
            : null;

        StartButton.Disabled = !hasAccess || availability != TerradropMapAvailability.Unexplored;

        // Replace the event handling method to use a simpler approach
        StartButton.OnPressed += _ =>
        {
            _sawmill.Debug($"Start button pressed for {proto.ID}");
            if (StartAction != null)
            {
                _sawmill.Debug($"Triggering StartAction for {proto.ID}");
                StartAction.Invoke(proto);
            }
            else
            {
                _sawmill.Error($"StartAction is null for {proto.ID}");
            }
        };

        _sawmill.Debug($"Created map panel: {proto.ID}, availability: {availability}, button disabled: {StartButton.Disabled}");
    }

    private void InitializePrerequisites(TerradropMapPrototype proto, SharedTerradropSystem terradrop, SpriteSystem sprite)
    {
        // required techs always visible, label in required techs
        foreach (var child in RequiredTechContainer.Children.ToList())
        {
            if (child != NoPrereqLabel)
                RequiredTechContainer.RemoveChild(child);
        }

        NoPrereqLabel.Visible = proto.MapPrerequisites.Count == 0;
        foreach (var techId in proto.MapPrerequisites)
        {
            var tech = _proto.Index(techId);
            var description = terradrop.GetMapDescription(tech);
            RequiredTechContainer.AddChild(new MiniMapCardControl(tech, description));
        }
    }

    protected override void ExitedTree()
    {
        base.ExitedTree();

        // No need to explicitly remove handlers as the control is being destroyed
    }
}
