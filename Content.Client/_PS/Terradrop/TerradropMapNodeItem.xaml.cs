using Content.Shared._PS.Terradrop;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.Graphics;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;

namespace Content.Client._PS.Terradrop;

[GenerateTypedNameReferences]
public sealed partial class TerradropMapNodeItem : LayoutContainer
{
    [Dependency] private readonly IPrototypeManager _prototype = default!;

    // Public fields
    public TerradropMapPrototype Prototype;
    public Action<TerradropMapPrototype, TerradropMapAvailability>? SelectAction;
    public TerradropMapAvailability Availability;

    // Some visuals - now using centralized color scheme
    public static readonly Color DefaultColor = TerradropColorScheme.UIColors.DefaultMapBackground;
    public static readonly Color DefaultBorderColor = TerradropColorScheme.UIColors.DefaultMapBorder;
    public static readonly Color DefaultHoveredColor = TerradropColorScheme.UIColors.DefaultMapHover;

    public Color BackgroundColor = DefaultColor;
    public Color SecondaryBackgroundColor = DefaultColor;
    public Color BorderColor = DefaultBorderColor;
    public Color HoveredColor = DefaultHoveredColor;
    public Color SecondaryHoveredColor = DefaultHoveredColor;
    public Color SelectedColor = DefaultHoveredColor;
    public Color SecondarySelectedColor = DefaultHoveredColor;

    // Selection state
    private bool _isSelected = false;
    public bool IsSelected
    {
        get => _isSelected;
        set
        {
            if (_isSelected == value)
                return;
            _isSelected = value;
            UpdateColor();
        }
    }

    public TerradropMapNodeItem(TerradropMapPrototype proto, SpriteSystem sprite, TerradropMapAvailability availability)
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        Availability = availability;
        Prototype = proto;

        var primaryColor = proto.Biome.Id switch
        {
            "Grasslands" => Color.LimeGreen,
            "Snow" => Color.GhostWhite,
            "Lava" => Color.OrangeRed,
            "Caves" => Color.Bisque,
            _ => Color.Azure,
        };
        var secondaryColor = Color.Aqua;

        NodeDisplay.SetPrototype(proto.Icon);

        Button.OnPressed += Selected;
        Button.OnDrawModeChanged += UpdateColor;

        // Set colors - border & background color varies by availability state
        BorderColor = TerradropColorScheme.GetTechBorderColor(availability);

        // Calculate background colors based on availability using centralized factors
        var darkenFactor = TerradropColorScheme.GetBackgroundInterpolationFactor(availability);

        BackgroundColor = Color.InterpolateBetween(primaryColor, Color.Black, darkenFactor);
        SecondaryBackgroundColor = Color.InterpolateBetween(secondaryColor, Color.Black, darkenFactor);

        // Create brighter versions of the discipline colors for hover by interpolating with white
        var hoverFactor = TerradropColorScheme.GetHoverMixingFactor();
        HoveredColor = Color.InterpolateBetween(primaryColor, Color.White, hoverFactor);
        SecondaryHoveredColor = Color.InterpolateBetween(secondaryColor, Color.White, hoverFactor);

        // Create even brighter versions for selection (persistent bright highlight)
        var selectionFactor = TerradropColorScheme.GetSelectionMixingFactor();
        SelectedColor = Color.InterpolateBetween(primaryColor, Color.White, selectionFactor);
        SecondarySelectedColor = Color.InterpolateBetween(secondaryColor, Color.White, selectionFactor);

        // Create regular single-color style box
        var roundedStyle = new StyleBoxFlat
        {
            BackgroundColor = BackgroundColor,
            BorderColor = BorderColor,
            BorderThickness = new Thickness(2.5f),
        };
        Panel.PanelOverride = roundedStyle;

        UpdateColor();
    }

    private void UpdateColor()
    {
        if (Panel.PanelOverride is StyleBoxFlat singleColorPanel)
        {
            // Priority: Selected > Hovered > Normal
            if (IsSelected)
                singleColorPanel.BackgroundColor = SelectedColor;
            else if (Button.IsHovered)
                singleColorPanel.BackgroundColor = HoveredColor;
            else
                singleColorPanel.BackgroundColor = BackgroundColor;

            singleColorPanel.BorderColor = BorderColor;
        }
    }

    protected override void ExitedTree()
    {
        base.ExitedTree();

        Button.OnPressed -= Selected;
    }

    private void Selected(BaseButton.ButtonEventArgs args)
    {
        SelectAction?.Invoke(Prototype, Availability);
    }
}

public sealed class TransparentButton : Button
{
    public event Action? OnDrawModeChanged;

    public TransparentButton()
    {
    }

    protected override void DrawModeChanged()
    {
        OnDrawModeChanged?.Invoke();
    }
}
