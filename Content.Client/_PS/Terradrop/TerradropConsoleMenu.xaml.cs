using System.Numerics;
using Content.Client.Parallax;
using Content.Client.Research;
using Content.Client.UserInterface.Controls;
using Content.Shared._PS.Terradrop;
using Content.Shared.Access.Systems;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.Player;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Input;
using Robust.Shared.Prototypes;

namespace Content.Client._PS.Terradrop;

[GenerateTypedNameReferences]
public sealed partial class TerradropConsoleMenu : FancyWindow
{
    public Action<string>? OnStartTerradropPressed;
    public event Action<BaseButton.ButtonEventArgs>? OnStartButtonPressed;

    [Dependency] private readonly IEntityManager _entity = default!;
    [Dependency] private readonly IPrototypeManager _prototype = default!;
    [Dependency] private readonly IPlayerManager _player = default!;

    private readonly SpriteSystem _sprite;
    private readonly AccessReaderSystem _accessReader;
    private ParallaxControl _parallaxControl;

    /// <summary>
    /// The parallax prototype to use for the background. Configurable.
    /// </summary>
    public string ParallaxPrototype { get; set; } = "Default";

    /// <summary>
    /// Updates the parallax background to use a different prototype
    /// </summary>
    /// <param name="parallaxPrototype">The new parallax prototype to use</param>
    public void SetParallaxPrototype(string parallaxPrototype)
    {
        ParallaxPrototype = parallaxPrototype;
        _parallaxControl.ParallaxPrototype = parallaxPrototype;

    }

    public EntityUid Entity;

    public ProtoId<TerradropMapPrototype>? CurrentMap;
    private bool _draggin;
    private const int GridSize = 90;
    private const int CardSize = 64;
    private static readonly Vector2i DefaultPosition = Vector2i.Zero;

    private Box2i _bounds = new(DefaultPosition, DefaultPosition);

    public TerradropConsoleMenu()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
        _sprite = _entity.System<SpriteSystem>();
        _accessReader = _entity.System<AccessReaderSystem>();

        MapScrollContainer.ScrollSpeedX = 100;
        MapScrollContainer.ScrollSpeedY = 100;
        MapScrollContainer.HScrollEnabled = false;
        MapScrollContainer.VScrollEnabled = true;

        _parallaxControl = new ParallaxControl
        {
            ParallaxPrototype = ParallaxPrototype,
            HorizontalExpand = true,
            VerticalExpand = true,
        };



        StartTerradropButton.OnPressed += args => OnStartButtonPressed?.Invoke(args);
        DragContainer.OnKeyBindDown += OnKeybindDown;
        DragContainer.OnKeyBindUp += OnKeybindUp;
        RecenterButton.OnPressed += _ => Recenter();
    }

    protected override void MouseMove(GUIMouseMoveEventArgs args)
    {
        base.MouseMove(args);

        if (!_draggin)
            return;

        // Adjust scroll position with drag
        var scrollSpeed = 2.0f;
        MapScrollContainer.VScrollTarget -= args.Relative.Y * scrollSpeed;
    }

    /// <summary>
    /// Raised when LMB is pressed at <see cref="DragContainer"/>
    /// </summary>
    private void OnKeybindDown(GUIBoundKeyEventArgs args)
    {
        if (args.Function == EngineKeyFunctions.Use)
            _draggin = true;
    }

    /// <summary>
    /// Raised when LMB is unpressed at <see cref="DragContainer"/>
    /// </summary>
    private void OnKeybindUp(GUIBoundKeyEventArgs args)
    {
        if (args.Function == EngineKeyFunctions.Use)
            _draggin = false;
    }

    protected override DragMode GetDragModeFor(Vector2 relativeMousePos)
        => _draggin ? DragMode.None : base.GetDragModeFor(relativeMousePos);

    public void SetEntity(EntityUid entity)
        => Entity = entity;

    public void SelectTech(TerradropMapPrototype proto, TerradropMapAvailability availability)
    {
        InfoContainer.RemoveAllChildren();
        if (!_player.LocalEntity.HasValue)
            return;

        // Update selection
        CurrentMap = proto.ID;

        // Update visual selection state
        foreach (var child in DragContainer.Children)
        {
            if (child is TerradropNodeItem techItem)
            {
                techItem.IsSelected = techItem.Prototype.ID == CurrentMap;
            }
        }

        // Create and add info panel
        var control = new TerradropInfoPanel(proto, _accessReader.IsAllowed(_player.LocalEntity.Value, Entity), availability, _sprite);
        control.StartAction += args => OnStartTerradropPressed?.Invoke(args.ID);
        InfoContainer.AddChild(control);
    }


    public void Recenter()
    {
        // Reset scroll position
        MapScrollContainer.VScrollTarget = 0;
    }

    public override void Close()
    {
        base.Close();
        DragContainer.RemoveAllChildren();
        InfoContainer.RemoveAllChildren();
    }
}
