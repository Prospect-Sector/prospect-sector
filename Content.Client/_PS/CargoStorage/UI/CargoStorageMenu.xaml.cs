using System.Linq;
using Content.Client.UserInterface.Controls;
using Content.Shared._PS.CargoStorage.BUI;
using Content.Shared._PS.CargoStorage.Data;
using Content.Shared._PS.CargoStorage.Systems;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;

namespace Content.Client._PS.CargoStorage.UI;

[GenerateTypedNameReferences]
public sealed partial class CargoStorageMenu : FancyWindow
{
    private const int AddToCart1 = 1;
    private const int AddToCart5 = 5;
    private const int AddToCart10 = 10;
    private const int AddToCart30 = 30;

    [Dependency] private readonly IPrototypeManager _protoManager = default!;
    [Dependency] private readonly IComponentFactory _componentFactory = default!;

    public event Action<BaseButton.ButtonEventArgs>? OnAddToCart1;
    public event Action<BaseButton.ButtonEventArgs>? OnAddToCart5;
    public event Action<BaseButton.ButtonEventArgs>? OnAddToCart10;
    public event Action<BaseButton.ButtonEventArgs>? OnAddToCart30;
    public event Action<BaseButton.ButtonEventArgs>? OnAddToCartAll;
    public event Action<BaseButton.ButtonEventArgs>? OnReturn;
    public event Action<BaseButton.ButtonEventArgs>? OnPurchaseCart;
    public event Action<BaseButton.ButtonEventArgs>? OnPurchaseLooseCart;

    private CargoStorageConsoleInterfaceState? _lastStateUpdate;
    private string _searchText = "";

    public CargoStorageMenu()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        PurchaseLooseCart.OnPressed += args => OnPurchaseLooseCart?.Invoke(args);
        PurchaseCart.OnPressed += args => OnPurchaseCart?.Invoke(args);
        SearchText.OnTextChanged += args => OnSearchTextChanged(args.Text);
        ClearSearchButton.OnPressed += ClearSearchText;
    }

    private void ClearSearchText(BaseButton.ButtonEventArgs args)
    {
        _searchText = "";
        SearchText.Text = "";
        if (_lastStateUpdate != null)
        {
            UpdateState(_lastStateUpdate);
        }
    }

    public void SetUiEnabled(bool enabled)
    {
        SearchText.Editable = enabled;
        PurchaseCart.Disabled = !enabled;
    }

    private void OnSearchTextChanged(string text)
    {
        _searchText = text;
        if (_lastStateUpdate != null)
        {
            UpdateState(_lastStateUpdate);
        }
    }

    public void UpdateState(CargoStorageConsoleInterfaceState uiState)
    {
        _lastStateUpdate = uiState;
        Populate(uiState.CargoStorageDataList, uiState.CartDataList, uiState.Enabled);
        CartEntitiesCount.Text = Loc.GetString("cargo-storage-item-count", ("count", uiState.CartEntities), ("capacity", 30));
        if (uiState.CartEntities == SharedCargoStorageSystem.CartMaxCapacity)
            CartEntitiesCount.FontColorOverride = Color.OrangeRed;
        else
            CartEntitiesCount.FontColorOverride = null;

        SetUiEnabled(uiState.Enabled);
        PurchaseCart.Disabled = uiState.CartDataList.Count <= 0 || !uiState.CanRequestBoxedCart;
        PurchaseLooseCart.Disabled = uiState.CartDataList.Count <= 0;
    }

    private void Populate(List<CargoStorageData> data, List<CargoStorageData> cartData, bool enabled = true)
    {
        Products.RemoveAllChildren();
        Cart.RemoveAllChildren();

        AddRows(Products, false, data, enabled);
        AddRows(Cart, true, cartData, enabled);
    }

    private void AddRows(Control container, bool isCart, List<CargoStorageData> data, bool enabled = true)
    {
        foreach (var marketData in data.OrderBy(md => md.Prototype))
        {
            // Try to get the EntityPrototype that matches marketData.Prototype
            if (!_protoManager.TryIndex<EntityPrototype>(marketData.Prototype, out var prototype))
            {
                continue; // Skip this iteration if the prototype was not found
            }

            if (!IsWithinSearchQuery(prototype))
                continue;

            if (!prototype.TryGetComponent(out SpriteComponent? sprite, _componentFactory))
            {
                continue; // Skip this iteration if the prototype was not found
            }

            if (isCart)
            {
                var productRow = new CargoStorageCartProductRow(prototype)
                {
                    Title = { Text = prototype.Name },
                    Quantity = { Text = marketData.Quantity.ToString() },
                    Icon = { Texture = sprite.Icon?.Default }
                };
                productRow.Return.OnPressed += args => { OnReturn?.Invoke(args); };
                productRow.Return.Disabled = !enabled;

                container.AddChild(productRow);
            }
            else
            {
                var productRow = new CargoStorageProductRow(prototype)
                {
                    Title = { Text = prototype.Name },
                    Quantity = { Text = Loc.GetString("cargo-storage-quantity-available", ("quantity", marketData.Quantity)) },
                    Icon = { Texture = sprite.Icon?.Default }
                };
                productRow.AddToCart1.OnPressed += args => { OnAddToCart1?.Invoke(args); };
                productRow.AddToCart1.Disabled = !enabled;

                if (marketData.Quantity > AddToCart1)
                {
                    productRow.AddToCartAll.Visible = true;
                    productRow.AddToCartAll.Disabled = !enabled;
                    productRow.AddToCartAll.OnPressed += args => { OnAddToCartAll?.Invoke(args); };
                }
                else
                    productRow.AddToCartAll.Visible = false;

                if (marketData.Quantity >= AddToCart5)
                {
                    productRow.AddToCart5.Visible = true;
                    productRow.AddToCart5.Disabled = !enabled;
                    productRow.AddToCart5.OnPressed += args => { OnAddToCart5?.Invoke(args); };
                }
                else
                    productRow.AddToCart5.Visible = false;

                if (marketData.Quantity >= AddToCart10)
                {
                    productRow.AddToCart10.Visible = true;
                    productRow.AddToCart10.Disabled = !enabled;
                    productRow.AddToCart10.OnPressed += args => { OnAddToCart10?.Invoke(args); };
                }
                else
                    productRow.AddToCart10.Visible = false;

                if (marketData.Quantity >= AddToCart30)
                {
                    productRow.AddToCart30.Visible = true;
                    productRow.AddToCart30.Disabled = !enabled;
                    productRow.AddToCart30.OnPressed += args => { OnAddToCart30?.Invoke(args); };
                }
                else
                    productRow.AddToCart30.Visible = false;


                container.AddChild(productRow);
            }
        }
    }

    private bool IsWithinSearchQuery(EntityPrototype prototype)
    {
        var text = _searchText.Trim();
        return string.IsNullOrEmpty(text) || prototype.Name.Contains(text, StringComparison.CurrentCultureIgnoreCase);
    }
}
